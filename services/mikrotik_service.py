# services/mikrotik_service.py
import routeros_api
import secrets
from datetime import datetime
import logging
from config import settings

logger = logging.getLogger(__name__)

async def create_mikrotik_hotspot_user(username: str, password: str, profile: str):
    connection = None
    try:
        connection = routeros_api.RouterOsApiPool(
            settings.MIKROTIK_HOST,
            username=settings.MIKROTIK_USERNAME,
            password=settings.MIKROTIK_PASSWORD,
            use_ssl=settings.MIKROTIK_USE_SSL,
            port=settings.MIKROTIK_API_PORT,
        )
        api = connection.get_api()

        # Vérifier si l'utilisateur Hotspot existe déjà pour le mettre à jour
        existing_users = api.get_resource('/ip/hotspot/user').get(name=username)
        if existing_users:
            logger.info(f"Utilisateur Hotspot '{username}' existe déjà. Mise à jour du profil.")
            api.get_resource('/ip/hotspot/user').set(
                id=existing_users[0]['.id'],
                password=password,
                profile=profile
            )
            return {"status": "updated"}
        else:
            api.get_resource('/ip/hotspot/user').add(
                name=username,
                password=password,
                profile=profile,
                comment=f"Generated by FastAPI for {username} at {datetime.now().isoformat()}"
            )
            logger.info(f"Utilisateur Hotspot '{username}' créé avec succès.")
            return {"status": "created"}

    finally:
        if connection:
            connection.disconnect()

def generate_mikrotik_voucher_details(user_prefix: str):
    mikrotik_username = f"{user_prefix}-{secrets.token_hex(4)}"
    mikrotik_password = secrets.token_hex(6)
    return mikrotik_username, mikrotik_password